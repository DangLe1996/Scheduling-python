   @classmethod
    def read_data_assembly(cls,filename, today):
        today = datetime.strptime( today,"%d/%m/%Y" )
        fields = ['Job no.','Order', 'Line', 'Status', 'Sched. Ship Date',
                 'Real Status' , 'Real Time', 'Promised' , 'ISSUE',
                 'Missing Materials', 'Production Group', 'Production Group', 'Complete/Partial' ]
        try:
            assembly_input = pd.read_csv(filename, skipinitialspace=True, usecols=fields)
            d_file= open("debug.csv","w")
            d_file.write('Order, Line, Status, Promised, Scheduled Ship Date, Issue, Missing Materials \n')
        except FileNotFoundError:
            print('Invalid file input or file does not exist, please check again')
            return 0
    

        line = []
        good_value = ['0', float('NaN')]
        dbug_value = ['Order', 'Line','Status','Promised', 'Sched. Ship Date', 'ISSUE','Missing Materials', 'Complete/Partial'  ]
        for index, row in assembly_input.iterrows():
            if row['Order'] not in cls.bad_orders:
                if not ( row['Status'] in sub_order.status_rank and row['Complete/Partial'] == 'Complete' and  (pd.isnull(row['ISSUE']) or row['ISSUE'] == '0')):
                    cls.bad_orders.append(row['Order'])
                    for i in dbug_value:
                        line += str(row[i]) + ','
                    line += '\n' 
        line = ''.join(line)
        d_file.write(line)
        for index, row in assembly_input.iterrows():
            if row['Order'] not in cls.bad_orders:
                    if(row['Order'] not in cls.map_order):
                        ord = order(row['Order'])
                        setattr(ord, 'priority', 5)
                        cls.map_order[row['Order']] = ord
                    sub = sub_order(index)
            
                    for value in fields:
                        setattr(sub, value, row[value])
                    setattr(sub, 'priority', sub_order.priority_rank[sub.Promised])
                    formatter_string = "%d.%m.%Y" 
                    datetime_object = datetime.strptime(getattr(sub,'Sched. Ship Date'), formatter_string)
                    subtract = abs((datetime_object - today).days)
                    setattr(sub,'ship_date', datetime_object.date())
                    setattr(sub,'days_from_today', subtract)
                    setattr(sub,'real_time', getattr(sub,'Real Time'))
                    quali = list(map(int, getattr(sub,'Production Group').split(',')))
                    setattr(sub, 'qualified_groups',quali)
                    value = [0, subtract]
                    ID = str(row['Order']) + str(row['Line']) + str(max(value))
                    setattr(sub, 'ID',int(ID))
                    if sub_order.status_rank[sub.Status] == 1 :
                        sub.Status = 1
                    elif sub_order.status_rank[sub.Status] == 2:
                        try:
                            if math.isnan(getattr(sub,'Missing Materials')):
                                sub.Status = 2   
                            elif getattr(sub,'Missing Materials') == '=+Cartridge':
                                sub.Status = 3
                            else :sub.Status = 7
                        except TypeError:
                            sub.Status = 7
                    elif sub_order.status_rank[sub.Status] == 3:
                        if getattr(sub,'Missing Materials') == '=+lens':
                            sub.Status = 4     
                        if getattr(sub,'Missing Materials') == 'Material+Cartridge':
                            sub.Status = 5  
                        if getattr(sub,'Missing Materials') == 'Material+lens+Cartridge+Housing':
                            sub.Status = 6
                        else :sub.Status = 7
                    else :sub.Status = 7
                    cls.map_oder_input(sub)
        print('File input sucessfully')
        for index, ord in cls.map_order.items():
            cls.order_rank[ord.Status].append(ord);
        return cls.order_rank



def AssemblyScheduling(all_orders, useages):

       # Instantiate a cp model.
   
    horizon = sum(o.a_time for o in all_orders); 
    
    horizon = horizon + sum(value for key, value in useages.items())
    horizon =math.ceil(horizon )
    model = cp_model.CpModel()
    # Variables
    makespan = model.NewIntVar(0, horizon, 'makespan')
    x = {}
    start= {}
    y = {}
    inter = []
    for o in all_orders:
        t = []
        for p in all_orders :
            if p.number !=  o.number:
                try:
                    inter = intersection(o.qualified_group, p.qualified_group)
                    if(len(inter) > 0):
                        for r in inter:
                            y[(o.number, p.number, r)] = model.NewBoolVar('y[%i,%i, %i]' % (o.number, p.number, r))
                except TypeError:
                    if o.qualified_group ==  p.qualified_group :
                        inter = o.qualified_group
                        y[(o.number, p.number, inter)] = model.NewBoolVar('y[%i,%i, %i]' % (o.number, p.number, inter))
        try:       
            for g in o.qualified_group: 
                x[(o.number,g)] = model.NewBoolVar('x[%i,%i]' % (o.number, g))
            start[o.number] = model.NewIntVar(0,horizon,'start[%i]' % o.number)
        except TypeError:
            g = o.qualified_group
            x[(o.number,g)] = model.NewBoolVar('x[%i,%i]' % (o.number, g))
            start[o.number] = model.NewIntVar(0,horizon,'start[%i]' % o.number)


    ## Constraints

    # Each task is assigned one qualified group.
    for o in all_orders:
        try:
            model.Add(sum(x[(o.number, g)] for g in o.qualified_group) == 1) 
            [model.Add(start[o.number] >= useages[g] *x[(o.number, g)] ) for g in o.qualified_group]
        except TypeError:
            model.Add(x[(o.number, o.qualified_group)]  == 1) 
            #model.Add(start[o.number] >= useages[o.qualified_group] )

    for o in all_orders:
        for p in all_orders :
            if p.number > o.number:
                try:
                    inter = intersection(o.qualified_group, p.qualified_group)
                    if(len(inter) > 0):
                        for r in inter:
                             model.Add(start[o.number] >= start[p.number] + p.a_time).OnlyEnforceIf(y[(o.number, p.number, r)])
                             model.Add(start[p.number] >= start[o.number] + o.a_time).OnlyEnforceIf(y[(p.number, o.number, r)])
                             model.Add(y[(o.number, p.number, r)] + y[(p.number, o.number, r)] >= x[(o.number, r)] + x[(p.number, r)] - 1)
                             model.Add(y[(o.number, p.number, r)] + y[(p.number, o.number, r)] <= x[(o.number, r)])
                             model.Add(y[(o.number, p.number, r)] + y[(p.number, o.number, r)] <=  x[(p.number, r)])
                            
                            #model.add(y[(o.number, p.number, r)] == 0).OnlyEnforceIf(x[(o.number, r)].Not())
                            #model.add(y[(o.number, p.number, r)] == 0).OnlyEnforceIf(x[(p.number, r)].Not())
                           
                            #model.Add(y[(o.number, p.number, r)] + y[(o.number, p.number, r)] == 1).OnlyEnforceIf(x[(o.number, r)] and x[(p.number, r)])
                except TypeError:
                    if o.qualified_group ==  p.qualified_group :
                        r = o.qualified_group
                        model.Add(start[o.number] >= start[p.number] + p.a_time).OnlyEnforceIf(x[(o.number, r)] and x[(p.number, r)] and y[(o.number, p.number, r)])
                        model.Add(start[p.number] >= start[o.number] + o.a_time).OnlyEnforceIf(x[(o.number, r)] and x[(p.number, r)] and y[(o.number, p.number, r)].Not())

    ## Total task size for each worker is at most total_size_max
    ##for i in all_workers:
    ##    model.Add(sum(sizes[j] * x[i][j] for j in all_tasks) <= total_size_max)

    ## Total cost
    [model.Add(makespan >= start[o.number] + o.a_time)  for o in all_orders]
    model.Minimize(makespan)

    solver = cp_model.CpSolver()
    solver.parameters.max_time_in_seconds = 5.0
    status = solver.Solve(model)
    print('Status is ', solver.StatusName(status))
    if status == cp_model.FEASIBLE:
        print('Feasible sol = %i' % solver.ObjectiveValue())
        assign_solution(solver, all_orders, start, x)
    if status == cp_model.OPTIMAL:
        print('Optimal sol = %i' % solver.ObjectiveValue())
        assign_solution(solver,all_orders, start, x)
        #print()
        #for i in all_workers:
        #    for j in all_tasks:
        #        if solver.Value(x[i][j]) == 1:
        #            print('Worker ', i, ' assigned to task ', j, '  Cost = ',
        #                  cost[i][j])

        #print()

    #print('Statistics')
    #print('  - conflicts : %i' % solver.NumConflicts())
    #print('  - branches  : %i' % solver.NumBranches())
    #print('  - wall time : %f s' % solver.WallTime())



def best_fit(solution, useage):
    for  o in solution:
        if(o.Status > 1):
            if type(o.qualified_group) == list:
                for g in o.qualified_group:
                    if(g != o.group):
                        if(useage[o.group] - useage[g] >= o.a_time):
                            useage[o.group] -= o.a_time
                            useage[g] += o.a_time
                            o.group = g
    #sorted(solution.values(), key=attrgetter('group', 'Status'))
    #sorted(solution.items(), key=attrgetter('group'), reverse=True) 
 
    #solution.values().sort(key =attrgetter('group', 'Status'))
    print('finish')




def assign_solution(solver, all_orders, start, x):
    for o in all_orders:
            setattr(o, 'start', solver.Value(start[o.number]))
            setattr(o, 'finish', o.start + o.a_time)
            try:
                for g in o.qualified_group:
                    if solver.Value(x[(o.number,g)]) == 1:
                        setattr(o, 'group', g)
            except TypeError: 
                setattr(o, 'group', o.qualified_group)

def common_member(a, b): 
    a_set = set(a) 
    b_set = set(b) 
    if (a_set & b_set): 
        return True 
    else: 
        return False

def intersection(lst1, lst2): 
    return list(set(lst1) & set(lst2))